@node Module -T
@chapter Tessellation Generation: neper -T

@MT{} enables one to generate Voronoi tessellations of a space
@dfn{domain}.  The domain can be cuboidal, cylindrical or of any other
convex shape.  The centres of the polyhedra can be randomly distributed
in the domain, which leads to @dfn{random Voronoi tessellations} (also
called @dfn{Poisson Voronoi tessellations}).  It is also possible to
generate columnar (2D) and bamboo (1D) grain morphologies, as well as
regular, periodic, arrangment of polyhedra (truncated octahedra are
currently available).  Two other types of tessellation can be obtained:
@dfn{periodic tessellations}, whose grains show periodicity conditions
at the domain boundary, and @dfn{subdomain-type tessellations}.  The
latter are cut out from tessellations of larger domains, and which have
the same polyhedron volume density.  Thus, the tessellations contain
grains whose centres are not within the domain. This behaviour is
controlled by option @option{-ttype}.  It is also possible to generate
centroidal Voronoi tessellations@footnote{Q. Du, V.  Faber and M.
Gunzburger, Centroidal Voronoi Tessellations: Applications and
Algorithms, SIAM Review, 41, 637--676, 1999.}, or even to load a
user-defined distribution of centres.  
Neper also includes an advanced tessellation @dfn{regularization}
capability.  It consists in
removing the small features of the tessellation (the edges and faces).
@c which are smaller than the target element size and as a consequence
@c would need local mesh over-refinements.
Using this capability is done by allowing some level of geometrical
distortion, the face @dfn{flatness fault}, through option
@option{-maxff} (value in degree).
The tessellations can be scaled to generate morphological textures (flat
or elongated grains).  The module generates as output a tessellation
file @file{.tess} that describes exhaustively the polycrystal morphology
(@pxref{File Formats}).  The @file{.tess} file is an input file of the
meshing modules, -FM @w{ and -MM} (@pxref{Module -FM} and @ref{Module
-MM}), and the orientation generation module, -O (@pxref{Module -O}).
The generated tessellation (@file{.tess} file) can be visualized with
@mVS{} (@ref{Module -VS}).

@sp 1
Here is what a typical run of @mT{} looks like:

@sp 1
@c typical_start
@verbatim 
    $ neper -T -n 10 -id 1
    
    ========================    N   e   p   e   r    =======================
    Info   : A 3D random polycrystal generator for the finite element method
    Info   : Version ...
    Info   : Compiled with: gsl libmatheval
    Info   : Ignoring initialization file.
    Info   : ---------------------------------------------------------------
    Info   : MODULE  -T loaded with arguments:
    Info   : [ini file] (none)
    Info   : [com line] -n 10 -id 1
    Info   : ---------------------------------------------------------------
    Info   : Reading input data ...
    Info   : Creating domain ...
    Info   : Creating polyhedron centres ...
    Info   :   - 10 centres created.
    Info   : Creating tessellation ...  100%
    Info   : Writing results ...
    Info   :     [o] Writing file `n10-id1.tess' ...
    Info   :     [o] Wrote file `n10-id1.tess'.
    Info   : Elapsed time: ... secs.
    ========================================================================
    
@end verbatim
@c typical_end

@page
@section Arguments

@subsection Input Data

By default, the domain to tessellate is taken as a cube of unit size.
For defining another domain, see option @option{-domain}.

@inp{-n,integer, 
Number of polyhedra of the tessellation@comma{} except for regular
morphologies (truncated octahedra@comma{} etc.@comma{} see option
@option{-morpho} for details).,
any, none}

@inp{-id,integer,
Identifier of the tessellation.,
any, @var{random}}

@inp{-morpho,char_string,
Type of morphology of the polyhedra. For random Voronoi
tessellations@comma{} it can be either equiaxed
(@code{equiaxed})@comma{} columnar
(@code{columnar@{x@comma{}y@comma{}z@}}) or bamboo-like
(@code{bamboo@{x@comma{}y@comma{}z@}}).@*
To load a particular set of polyhedron centres@comma{} use the syntax
@samp{@@@var{file_name}} where @code{@var{file_name}} is the name of a
file containing the @w{@math{3 * n}} coordinates.@*
Regular morphologies can also be obtained: truncated octahedra
(@code{tocta})@comma{} in which case the value of option @option{-n}
stands for the number of polyhedra along an edge of the domain instead
of the total number of polyhedra.
,
see above list, equiaxed}

@opt{-ttype,char_string,
Specify the type of tessellation.
The available values are
@samp{standard} for a standard tessellation@comma{}
@code{periodic} for a periodic tessellation and
@code{subdomain} for a subdomain-type tessellation.
,
see above list, standard}

@inp{-centroid,logical,
Use this option to turn the tessellation centroidal.
,
0 or 1, 0}

The generation of a centroidal Voronoi tessellation is based on Lloyd's
algorithm and can be two to three orders of magnitude as long as for the
equivalent Voronoi tessellation.  The convergence criteria are
controlled by options @option{-centroidfact}, @option{-centroidconv}
and @option{-centroiditermax}.

@sp 1
Is it also possible to load a tessellation or voxel data from a file,

@inp{-loadtess,file_name,
Load a tessellation from a file.  Provide as argument the file name.  
,
any,none}

@inp{-loadvox,file_name,
Load voxel data from a file.  Provide as argument the file name.  
,
any,none}

@subsection Domain Options 

@opt{-domain,char_string @dots{},
Specify the type of domain and its size.  For a cuboidal shape@comma{}
provide @samp{cube} followed by the sizes along the x@comma{} y and z
directions.  For a cylindrical shape@comma{} provide @samp{cylinder}
followed by the height and diameter.  For a tessellation
polyhedron@comma{} provide @samp{tesspoly} followed by the name of the
tessellation file (@file{.tess}) and the number of the polyhedron (the
tessellation must not be regularized).  For an arbitrary shape@comma{}
provide @samp{planes} followed by the name of a file containing the
total number of planes then@comma{} for each plane@comma{} the
parameters of its equation (@math{a}@comma{} @math{b}@comma{} @math{c}
and @math{d} for an equation of the form @math{a@,x+b@,y+c@,z=d}). The
plane normal must be an outgoing vector of the polyhedron.
, 
see above list, cube 1 1 1}

@optsec{-cylinderfacet, integer,
Specify the number of facets along the circular part of a cylindrical
domain.
,
any >= 3, function of the poly rad}

@subsection Tessellation Options 

@opt{-scale,real real real,
Specify the factors in the x@comma{} y and z directions by which the
tessellation is to be scaled (once generated).
, 
any,none}

@optsec{-sort,char_string char_string,
This option can be used to sort the tessellation entities (typically to
facilitate data post-processing).  The first argument is the type of
entity to sort (must be @code{poly}) and the second argument is the
mathematical expression used for sorting (@pxref{Mathematical
Expressions}).  For polyhedra@comma{} the available variables are the
centre coordinates@comma{} @var{cenx}@comma{} @var{ceny} and
@var{cenz}@comma{} the true and body parameters @var{true} and
@var{body}@comma{} and the volume @var{vol}., any,none}

@optsec{-randomize,real integer,
This option can be used to ``randomize'' the coordinates of the 
polyhedron centres.  Provide as argument the maximum shift distance and
an identifier for the randomization. The resulting centre shift
distances are uniformly distributed between 0 and the maximum shift
distance.
, 
any > 0 any,none}
 
@optsec{-randomizedir,char_string,
This option can be used with option @option{-randomize}@comma{} to
specify the possible directions in which the polyhedron centres are to
be shifted.  Provide as argument the directions. Combine them
with @samp{@comma{}}.
, 
x@comma{} y@comma{} z,x@comma{}y@comma{}z}

@optsec{-centroidfact,real,
This option can be used with option @option{-morpho centroid}@comma{} to
specify the factor by which the germ positions are shifted between
their current positions and the centroid positions@comma{} at each
iteration.  (Lloyd's algorithm is obtained for a value of 1@comma{} but
a lower value can lead to faster convergence.)
, 
0 to 1,0.5}

@optsec{-centroidconv,real,
This option can be used with option @option{-morpho centroid}@comma{} to
specify the maximum tolerance on the distance between the polyhedron
centres and centroids. 
The tolerance is relative to the average grain radius.
, 
any > 0,0.02}

@optsec{-centroiditermax,integer,
This option can be used with option @option{-morpho centroid}@comma{} to
specify the maximum number of iterations. You should consider using option
@option{-centroidconv} instead.
, 
any, 1000}
 
@subsection Regularization Options

A non-zero value of @var{maxff} is necessary to enable geometry
regularization; the other options are for fine tuning.

@opt{-maxff,real,
Maximum face flatness fault which is allowed (in degree).,
0 to 180 (recommended: 20),0}

@optsec{-sel or -rsel,real,
Absolute or Relative Small Edge (maximum) Length.
@code{rsel} is defined relative to the average polyhedron volume.  The
default @code{-rsel 1} leads to a length of 0.25 for a unit volume
polyhedron.
The value also enables to avoid mesh refinement with
the default meshing parameters (@pxref{Module -FM}).
Use this option if you want to choose a different length.,
any,-rsel 1}

@optsec{-dbound,char_string,
Define which polyhedra belong to the domain boundary.  The expression
can be based on the following arguments: @code{body} and @code{true}.
An example is @code{"body<=1"}.
,
any, none}

@optsec{-dboundsel and -dboundrsel,real,
Absolute or Relative Small Edge (maximum) Length at the domain boundary.
These options are equivalent to options @option{-sel} and
@option{-rsel}@comma{} but apply to the domain boundary.,
any,-dboundrsel 1}

@optsec{-mloop,integer,
Maximum number of edge deletion loops.@*
During each loop@comma{} the small edges are considered in turn
from the shortest to the largest.  One loop already leads to very
satisfactory results. Use more to get better results. The deletion
process completes as soon as no edges are deleted within a loop.,
any,2}

@subsection Output Options

@opt{-o,file_name,
Specify the output file name.,
any,none}

@opt{-format,char_string,
Specify the format of the output file(s). 
The available formats are the Neper @code{tess} and @code{vox}@comma{}
the Gmsh @code{geo}@comma{} the Ply @code{ply} and the 3DEC @code{3dec}
(combine with commas).
,
tess@comma{} geo@comma{} ply@comma{} 3dec@comma{} vox,tess}

@opt{-voxformat,char_string,
Specify the format of the vox output file(s). 
The available formats are @code{ascii}@comma{} @code{binary8}@comma{}
@code{binary16} and @code{binary32}.
,
ascii@comma{} binary8@comma{} binary16@comma{} binary32,binary16}

@subsection Post-Processing Options

@post{-statver,char_string,
Provide statistics on the tessellation vertices.  Give as argument
the keys as described in @ref{Statistics Keys} (combine with
commas).
,
any, none,
.stver}

@post{-statedge,char_string,
Provide statistics on the tessellation edges.  Give as argument
the keys as described in @ref{Statistics Keys} (combine with
commas).
,
any, none,
.stedge}

@post{-statface,char_string,
Provide statistics on the tessellation faces.  Give as argument
the keys as described in @ref{Statistics Keys} (combine with
commas).
,
any, none,
.stface}

@post{-statpoly,char_string,
Provide statistics on the tessellation polyhedra.  Give as argument
the keys as described in @ref{Statistics Keys} (combine with
commas).
,
any, none,
.stpoly}

@post{-pointpoly,file_name,
Provide the numbers of the polyhedra of which specific points belong.
Give as argument the name of the file containing the coordinates of the
points.
,
any,none,
.polyid}
 
@subsection Debugging Options

@inp{-checktess,file_name,
Check a tessellation from a file.  Provide as argument the file name.  
Use this option if the tessellation file fails to load using
@option{-loadtess} or in the other modules.
,
any,none}

@section Output Files

@subsection Tessellation

@itemize
@item Neper tessellation file: @file{.tess}

It contains an exhaustive description of the tessellation.
See @ref{File Formats} for the file syntax.

@item Gmsh geometry file: @file{.geo}

It contains a minimal description of the tessellation written under the
Gmsh geometry file format @file{.geo}.  This file can be opened with
Gmsh for visualization.  (Note that you can even get a mesh of the
tessellation out from Gmsh, but it will be of lower quality than by
using module @code{-FM}.)

@item Ply file: @file{.ply}

It contains a description of the tessellation written under the
standard ``Polygon File Format'' @file{.ply}.

@item 3DEC file: @file{.3dec}

It contains a description of the tessellation written under the
3DEC format @file{.3dec}.

@item Neper voxel file: @file{.vox}

It contains a voxel-based description of the tessellation.
See @ref{File Formats} for the file syntax.

@c @item tessellation debugging file: @file{.debug}
@c It contains a human-friendly description of the tessellation, for
@c debugging.
@end itemize

@subsection Statistics

Statistics files are provided for vertices, edges, faces and polyhedra.
They are formatted with one entity per line.  Each line has the data
provided by options @option{-stat*} and described in 
@ref{Statistics Keys}.

@itemize
  @item tessellation vertex statistics, @file{.stver}.
  @item tessellation edge statistics, @file{.stedge}.
  @item tessellation face statistics, @file{.stface}.
  @item tessellation polyhedron statistics, @file{.stpoly}.
@end itemize

@subsection Post-Processing

@itemize
@item polyhedron identifier file: @file{.polyid}

It contains the identifiers of the polyhedra of which specific points
belong (see option @option{-pointpoly}).  By definition, they range from
@code{1} to the maximum number of polyhedra in the tessellation. In the
case of a point which does not belong to any polyhedron, the returned
value is @code{0}.
@end itemize

@section Examples

Below are some examples of use of neper -T.  Illustrations can be found
at @url{http://neper.sourceforge.net/neper_t.html}.

@enumerate
@c Example_beg
@item    Generate a polycrystal made of 100 grains, with identifier = 1. 
@com{neper -T -n 100 -id 1}
@item    Use an elongated domain and generate a polycrystal made of 100 grains, with identifier = 1.
@com{neper -T -n 100 -id 1 -domain cube 3 1 0.33}
@item    Generate a polycrystal made of 100 grains, with identifier = 1, and stretch it to model a morphological texture.
@com{neper -T -n 100 -id 1 -scale 3 1 0.33}
@item    Generate a polycrystal made of 100 columnar grains.
@com{neper -T -n 100 -id 1 -morpho columnarz}
@item    Generate a polycrystal made of approximately 5x5x5 truncated octahedra. 
@com{neper -T -n 5 -morpho tocta -o tocta5}
@item    Generate a polycrystal made of 100 grains in a cylindrical domain of height 2 and diameter 1.
@com{neper -T -n 100 -id 1 -domain cylinder 2 1}
@c Example_end
@end enumerate
