@node Introduction
@chapter Introduction

@section The Neper Project

@subsection Description

Neper is a software package for 3D random polycrystal generation and
meshing.  It is built around several modules:


@itemize @bullet
@item @MT{} is the module for generating polycrystals.  They are
respresented as Voronoi tessellations, or regular tessellations made of
truncated octahedra.  The tessellations are space-filling, and the
vertices, edges, faces and volumes, represent the quadruple points,
triple lines, grain boundaries and grains of the polycrystals,
respectively.  The tessellations are brick-shape by default, but can be
of any convex shape.  After they have been generated, they can be
deformed to account for morphological texture.  @MT{} also includes an
advanced ``regularization'' capability to remove the small features of
the tessellations, which subsequently enables to obtain better quality
meshes.

@item @MM{} is the module for meshing polycrystals. Two capabilities are
available: meshing into tetrahedral elements that conform to the
tessellation morphology, or meshing into regular hexahedral elements.
Tetrahedral element meshing includes features that are necessary to get
good-quality meshes: optimized meshing rules and multimeshing (the
concurrent use of several meshing algorithms). Remeshing is available to
generate a new, good-quality mesh from a deformed mesh.

@item @MO{} provides crystal orientations for the grains.  The
orientations are randomly distributed according to a uniform
distribution.

@item @MVS{} is for generating publication-quality images of the
tessellations and meshes. It is possible to visualize data on them
and to make slices.

@end itemize

Neper aims to be an easy-to-use, efficient and robust tool.  All the
input data are prescribed non-interactively, using command lines and/or
ASCII files. This makes it possible to automate all treatments.

@subsection Resources

Several, complementary resources describing the Neper capabilities
are available:

@itemize
@item The Neper reference manual, which is the present document.  It describes all the Neper
capabilities. It is made of one chapter for each module, describing
the available commands and result files, and providing some examples.
The manual comes both as a PDF file and an info file.  Provided
that the info file is properly installed at your site, it can be
accessed by the command: @command{info neper}.

@item The Neper homepage, @url{http://neper.sourceforge.net}.  It is
where the Neper distribution can be downloaded from. It also provides an
introduction to Neper, with some examples and illustrations.

@item The Neper paper,
``@cite{R.@ Quey, P.R.@ Dawson and F.@ Barbe, Large-scale 3D random
polycrystals for the finite element method: Generation, meshing and
remeshing, Comput.@ Methods Appl.@ Mech.@ Engrg., vol.@ 200, pp.@
1729-1745, 2011.}''. It
provides details on the algorithms.  It can be downloaded
from the Neper homepage or by following this link:
@url{http://neper.sourceforge.net/neper_paper.pdf}.

@item The Neper Git repository, @url{http://github.com/rquey/neper}.
It is where the development version can be downloaded from. The
repository can also be cloned using the command
@w{@samp{@command{git clone git://github.com/rquey/neper.git}}}.

@end itemize

@section Installing Neper

Neper is written in (mostly ANSI) C and can run on any Unix-like system.
Neper can be compiled using Cmake, a standard open-source build system.
The main steps are as follows,

@itemize
@item Create a @file{build} directory, for example as a subdirectory of
Neper's @file{src} directory,

@com{mkdir build}

@item Run cmake from within the @file{build} directory, pointing to Neper's
@file{src} directory,

@com{cd build}
@com{cmake ..}

@item To build and install Neper, then simply type,

@com{make}
@com{make install (as root)}

@end itemize

This will use the default configuration options, including on which
dependencies are used, and should work out of the box on condition that
the required libraries are installed in standard system locations.  A
finer configuration can be achieved before building Neper, as described
in the following.

Neper has mandatory as well as optional dependencies, as detailed in the
following.  Some dependencies are managed at compilation time,

@itemize

@item the GSL library (mandatory)

It is likely to be available on your system or from your system package
manager (binary and development packages).  Alternatively, the
source code version can be obtained from the GSL homepage,
@uref{http://www.gnu.org/software/gsl}.

@item the libmatheval library (optional, @emph{included} by default)

It is likely to be available on your system or from your system package
manager (binary and development packages).
Alternatively, the source code version can be obtained from the
libmatheval homepage, @uref{http://www.gnu.org/software/libmatheval}.

@item the libScotch library (optional, @emph{not included} by default)

@MM{} includes mesh partitioning capabilities, which make use of the
Scotch mesh partitioner (version @code{5.1.12} or later).  It can be
downloaded from the Scotch homepage,
@url{www.labri.fr/perso/pelegrin/scotch}.
@end itemize

Optional dependencies can be toggled on / off using Cmake's GUI
(@command{cmake-gui}) or @command{ccmake}, by setting variables
@code{HAVE_@var{LIBRARYNAME}} to ON or OFF, respectively.

The following dependencies are only needed at run time,
@c
@itemize

@item the Gmsh program (mandatory for module -M)

This version on Neper is intended to work with Gmsh (version
@code{2.4.2} or later, excluding version @code{2.5.1}), which can be
downloaded from @url{http://www.geuz.org/gmsh}.  A working Gmsh
installation must be available on your system.

@item the POV-Ray program (mandatory for module -VS)

Module -VS uses POV-Ray to produce publication-quality images of the
tessellations and meshes.  POV-Ray can be downloaded from
@url{http://www.povray.org}.  POV-Ray must be available in the terminal
through the command: @command{povray}.

@end itemize

@c Moreover, the documentation can be installed as an @file{info} file.  On
@c most systems, this can be achieved simply by copying the file
@c @file{neper.info} into an info directory (usually @file{/usr/info},
@c @file{/usr/local/info} or @file{/usr/doc/info}).

@page
@section Getting Started

Using Neper consists in running the command @file{neper} in a terminal,
with a list of arguments,

@com{neper @var{list_of_arguments}}

The arguments define the problem for Neper to solve.  Neper then returns
output in ASCII files, together with some messages in the terminal.
Neper includes some general-purpose self-explanatory commands,

@com{neper --help}
@com{neper --version}
@com{neper --license}

@subsection Call a Module

A typical Neper invocation consists in calling a module and providing it
with a number of arguments:

@com{neper @var{module_name} @var{module_arguments}}

The module names are @option{-T},
@option{-M}, @option{-O} and @option{-VS}.
The module arguments can include both required input
data and options.  Options start @w{by @samp{-}}.  The options can be
given in arbitrary order (except for module @code{-VS}) and are to be
specified as follows: ``@var{option_name option_value}''.  The options
can be written both in British English and in American English, although
only the British English versions are indicated in this manual.  String
completion is available for all arguments, so they may be abbreviated as
long as the abbreviation is not ambiguous. For example, in module
@code{-O}, the option @option{-descriptor} can be abbreviated to
@option{-des} or even safely @w{to @option{-d}}.  Logical options can be
selected by giving the @w{value @samp{1}} or disabled by @w{giving
@samp{0}}.  Neper is highly parametrable and as a consequence includes
quite a large number of options.  For clarity, they are tagged by
importance level in the reference manual: @w{`[Option]'} or
@w{`[Secondary option]'}.  Post-processing options are tagged
@w{`[Post-processing]'}.

@subsection Initialization File

When Neper is started, it reads commands from an initialization file,
@file{$HOME/.neperrc}, if that file exists.  This behaviour can be
modified through option @option{--rcfile}, which has to be loaded
@emph{prior to} calling a module,

@com{neper --rcfile @var{my_file} @var{module_name module_arguments}}

To inhibit the reading of an initialization file, provide `@code{none}'
as value of the @var{my_file} argument.

When a module of Neper is called,
Neper looks for the occurrence of @samp{neper @var{module_name}} in the
initialization file, then reads all arguments until the next occurrence
of @samp{neper} (which should denote the beginning of another module
option field) or the end of the file.  Moreover, any comments can be
written after giving @samp{neper comments}.  The arguments may be any
legal arguments, but are typically limited to frequently-used options.

@c @medskip
An example of initialization file is given below:

@c @cartouche
@example
@c @group
neper comments ------------------------------------------------------
This is my initialization file (~/.neperrc).
neper -T -maxff 20
neper -M -order 2 -gmsh my_gmsh_path
neper comments ------------------------------------------------------
@c @end group
@end example
@c @end cartouche

@c @medskip
If the initialization file is not found, or if @samp{neper
@var{module_name}} is not found is the file, Neper will just consider
the command line arguments.  Also note that if an argument is
initialized several times (for example, both in the initialization file
and at the command line), the last specified value is retained.

@need 4000
@subsection Conventions

@subsubsection Manual

The Neper documentation is maintained as a Texinfo manual.  Here are
the writing conventions used in the document:

@enumerate
@item A command that can be typed in a terminal is printed like @command{this}, or, in the case of a major command, like @com{this}
@item a program (or command) option is printed like @option{this};
@item The name of a variable is printed like @code{this};
@item A metasyntactic variable (i.e.@: something that stands for another piece of text) is printed like @var{this};
@item Literal examples are printed like @samp{this};
@item File names are printed like @file{this}.
@end enumerate

@c Some abbreviations are used consistently for options:
@c
@c @multitable @columnfractions 0.5 0.5
@c @item
@c @multitable @columnfractions 0.2 0.6
@c @item tess  @tab tessellation
@c @item geo   @tab geometry
@c @item stat  @tab statistics
@c @item poly  @tab polyhedron@comma{} polyhedra
@c @item ver   @tab vertex@comma{} vertices
@c @item dim   @tab dimension
@c @item cl    @tab characteristic length
@c @item min   @tab minimum
@c @item max   @tab maximum
@c @end multitable
@c
@c @tab
@c @multitable @columnfractions 0.3 0.6
@c @item algo  @tab algorithm
@c @item part  @tab partition
@c @item arch  @tab architecture
@c @item surf  @tab surface
@c @item stat  @tab statistics
@c @item iter  @tab iteration
@c @item nset  @tab node set
@c @item elset @tab @w{element set}
@c @end multitable
@c
@c @end multitable

@subsubsection Option Arguments

When using the different Neper modules, you may want to provide several
values to a given option.  A typical example is when you want to set the
format of the tessellation or mesh files.  In this case, the several
values can be specified at the same time, separated by commas.
Neper will process them sequentially. For instance, in module -T, you
may use option @w{@samp{-format tess,ply}} to get the tessellation both
in Neper's tessellation @w{format @file{.tess}} and in @w{Ply format
@file{.ply}}.
