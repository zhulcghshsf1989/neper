@node Module -O
@chapter Crystal Orientation Generation: @w{neper -O}

@MO{} is the module to generate crystal orientations for the
grains of the tessellations generated by @mT{}.  The orientations are
randomly distributed according to a uniform distribution.  They can be
provided according to different descriptors: Euler angles (Bonge, Kocks
and Roe conventions), rotation matrix, rotation @w{axis /} angle,
Rodrigues vector and quaternion.
The input data is a tessellation @file{.tess} provided by @mT{}, but
it can also be the data (@code{n}, @code{id}).  The output data in an
orientation file @file{.ori}.

@sp 1
Here is what a typical run of @mO{} looks like:

@sp 1
@c typical_start
@verbatim 
    $ neper -O -n 10 -id 1
    
    ========================    N   e   p   e   r    =======================
    Info   : A 3D random polycrystal generator for the finite element method
    Info   : Version ...
    Info   : Compiled with: gsl libmatheval
    Info   : Ignoring initialization file.
    Info   : ---------------------------------------------------------------
    Info   : MODULE  -O loaded with arguments:
    Info   : [ini file] (none)
    Info   : [com line] -n 10 -id 1
    Info   : ---------------------------------------------------------------
    Info   :     [o] Writing file `n10-id1.ori' ...
    Info   :     [o] Wrote file `n10-id1.ori'.
    Info   : Elapsed time: ... secs.
    ========================================================================
    
@end verbatim
@c typical_end

@section Arguments

@subsection Input Data

The required input data are:

@inp{,file.tess,
Name of the tessellation file.,
any,none}

@c @medskip
@i{or}, the two following ones:

@inp{-n,integer,
Number of crystal orientations.,
any, none}

@inp{-id,integer,
Identifier of the set of orientations.,
any,none}

Alternatively, orientations can be loaded from a file,
@inp{-load,input_type file_name,
Load an orientation file.  Provide the type of orientation descriptor (see
option @option{-descriptor}) and the file name.  
,
any any,none}

@subsection Orientation Options

@optsec{-crysym,char_string,
Specify the crystal symmetry.  This is only used to reduce the domain
  of definition of the orientation descriptors.,
triclinic or cubic, triclinic}

@subsection Output Options

@opt{-o,file_name,
Specify orientation output file name.,
any,none}

@opt{-descriptor,char_string,
Select the orientation descriptor. It can be Euler angles in
Bunge@comma{} Kocks or Roe convention (@code{e}@comma{}
@code{ek}@comma{} @code{er})@comma{} rotation matrix (@code{g})@comma{}
@w{axis /} angle or rotation (@code{rtheta})@comma{} Rodrigues vector
(@code{R}) or quaternion (@code{q}).,
above-mentionned values, e}

@opt{-format,character_string,
Specify the format of output file(s). The available formats are:
the Neper-native @code{plain} (i.e.@: only the descriptors on
successive lines)@comma{} the Zset/Z@'ebulon @code{geof} and the
Fem-Evps @code{fev} (combine with commas).
,
above-mentionned values,plain}

@subsection Colouring Options

@optf{-colour,character_string,
Use this option to get colours from the orientations. Provide
as argument the type of colouring: the only one available is from the
Rodrigues vectors (@code{R}). To use this option@comma{}
@option{-crysym} must be set to cubic.,
R,none,
.col}


@section Output Files

@itemize
@item Crystal orientation file, @file{.ori}: format corresponding to
option @option{-format}.  The grains orientations are listed on
successive lines.

@item Orientation colour file, @file{.col}:
@w{@code{@var{red_level green_level blue_level}}}.  The levels are
integers comprised in the range @math{[0,\,255]}.
@end itemize

@section Examples

Below are some examples of use of neper -O.  Illustrations can be found
at @url{http://neper.sourceforge.net/neper_o.html}.

@enumerate
@c Example_beg
@item    Generate a set of 100 random crystal orientations, with identifier = 1. Note the uniform distribution.
@com{neper -O -n 100 -id 1}
@c Example_end
@end enumerate

Below are additional examples.

@enumerate
@item @emph{Orientation generation.} Generate a set of crystal
orientations from the input file @file{n100-id1.tess}.
@com{@code{neper -O n100-id1.tess}}

@item @emph{Orientation colour generation.} Generate colours which
correspond to the orientations written in file @file{n100-id1.ori}
(Euler angles in Kocks convention).
@com{@code{neper -O -load ek n100-id1.ori -crysym cubic -col R}}

@end enumerate
