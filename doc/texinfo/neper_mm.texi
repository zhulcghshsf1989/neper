@node Module -MM
@chapter Tessellation Mapped Meshing: neper -MM

@MMM{} is the module to generate a mapped mesh of a tessellation, that
is, a mesh comprised of regular, brick elements.  Such a mesh does not
conform exactly to the tessellation morphology: the interfacial
features, and more particularly the grain boundaries and triple lines,
have stepped shapes.  The input file is a tessellation file
(@file{.tess}), as provided by @mT{} (is which case the domain must be
cuboidal), or simply the data @code{(n, id)}
(same input as for @mT{}, @pxref{Module -T}).
The output mesh can be written in several formats.

In addition to the tessellations generated by @mT{} (or equivalently
through the @code{(n, id)} data), two other types of tessellation can be
obtained: @dfn{periodic tessellations}, whose grains show periodicity
conditions at the domain boundary, and @dfn{subdomain-type tessellations}.
The latter are cut out from tessellations of larger domains, and which
have the same polyhedron volume density.  Thus, the tessellations
contain grains whose centres are not within the domain. This
behaviour is controlled by option @option{-ttype}.

The level of mesh density is specified a bit differently than in @mFM{}.
This is done through the following parameter:

@itemize
@item The number of elements along one dimension of the domain
(@code{msize}).  For a non-cubic domain, an average, equivalent length of
the domain is considered so as to get cubic elements. The number of
elements along each of the directions of the domain can also be
specified explicitly (option @option{-msize3}).

@end itemize

In the output mesh, the grains are described by element sets.  Node sets
of the faces, the edges and the vertices of the surface of the
tessellation are also provided for prescribing the boundary conditions
(option @option{-nset}).  The surface element sets (squares) are also
provided (option @option{-faset}).  The mesh order can be 1 or 2,
corresponding to 8-node cubic elements and 20-node cubic elements,
respectively (option @option{-order}).  


@sp 1
Here is what a typical run of @mMM{} looks like:

@c typical_start
@verbatim 
    $ neper -MM n10-id1.tess
    
    ========================    N   e   p   e   r    =======================
    Info   : A 3D random polycrystal generator for the finite element method
    Info   : Version 1.10.1
    Info   : (compiled with: gsl libmatheval)
    Info   : Loading initialization file `/home/rquey/.neperrc'...
    Info   : ---------------------------------------------------------------
    Info   : MODULE -MM loaded with arguments:
    Info   : [ini file] (none)
    Info   : [com line] n10-id1.tess
    Info   : ---------------------------------------------------------------
    Info   : Mapped meshing ...
    Info   :   - Loading tessellation ...
    Info   :     [i] Parsing file `n10-id1.tess' ...
    Info   :     [i] Parsed file `n10-id1.tess'.
    Info   :   - Generating mesh ...
    Info   :   - Searching elsets ...  100%
    Info   : Writing results ...
    Info   :   - Writing mesh results ...
    Info   :     [o] Writing file `n10-id1.msh' ...
    Info   :     [o] Wrote file `n10-id1.msh'.
    Info   : Elapsed time: 0.040 secs.
    ========================================================================
    
@end verbatim
@c typical_end

@section Arguments

@subsection Input Data

The required input data are:

@inp{,file_name,
Name of the tessellation file.
,
any,none}

@c @medskip
or, the following ones,

@inp{-n,integer, 
Number of polyhedra of the tessellation@comma{} except for regular
morphologies (truncated octahedra@comma{} etc.@comma{} see option
@option{-morpho} for details).,
any, none}

@inp{-id,integer,
Identifier of the tessellation.,
any, @var{random}}

@inp{-morpho,char_string,
Type of morphology of the polyhedra. For random Voronoi
tessellations@comma{} it can be either equiaxed
(@code{equiaxed})@comma{} columnar
(@code{columnar@{x@comma{}y@comma{}z@}}) or bamboo-like
(@code{bamboo@{x@comma{}y@comma{}z@}}).@*
To load a particular set of polyhedron centres@comma{} use the syntax
@samp{@@@var{file_name}} where @code{@var{file_name}} is the name of a
file containing the @w{@math{3 * n}} coordinates.@*
Regular morphologies can also be obtained: cubes (@code{cube}) or 
truncated octahedra
(@code{tocta})@comma{} in which case the value of option @option{-n}
stands for the number of polyhedra along an edge of the domain instead
of the total number of polyhedra.
,
see above list, equiaxed}

@subsection General Options

@opt{-o,file_name,
Specify output file name.,
any,none}

@c @opt{-v,integer,
@c Set verbosity level.,
@c 0 to 1,0}

@subsection Domain Options 

@opt{-domain,char_string @dots{},
Specify the type of domain and its size.  The only type of domain
available is of cuboidal shape
(@samp{cube}).  Then provide the sizes along the x@comma{} y and z
directions.
, 
see above list, cube 1 1 1}

@subsection Tessellation Options

This is for a tessellation mesh built from (@code{n}, @code{id}) only, not from
a tessellation file.

@opt{-scale,real real real,
Specify the factors in the x@comma{} y and z directions by which the
tessellation is to be scaled (once generated).
, 
any,none}

@opt{-ttype,char_string,
Specify the type of tessellation (applies to tessellations built
with @code{(n@comma{} id)}@comma{} not by @mT{} (@file{.tess} file)).
The available values are
@samp{standard} for a standard tessellation@comma{}
@code{periodic} for a periodic tessellation and
@code{subdomain} for a subdomain-type tessellation.
,
see above list, standard}

@subsection Mesh Options

@opt{-msize,integer,
Specify the mesh size (number of elements per unit length).,
any,20}

@optsec{-msize3,integer integer integer,
Specify the mesh size (number of elements per unit length) along the
x@comma{} y and z directions.,
any,20 20 20}

@opt{-order,integer,
Specify the mesh order.,
1 to 2,1}


@subsection Output Options

@opt{-outdim,char_string,
Specify the dimensions of the mesh to output. It can go from 0 to
3@comma{} for point to volume elements (combine with commas).,
0@comma{} 1@comma{} 2@comma{} 3@comma{},
3}

@opt{-nset, char_string,
Specify the node sets to provide@comma{} among:
@code{faces}@comma{} @code{edges}@comma{} @code{vertices} for all
domain faces@comma{} edges and vertices@comma{}
and @code{facebodies} and @code{edgebodies} for all face and edge
bodies. To get the nset corresponding to individual entities@comma{}
provide their names@comma{} that is@comma{} for a cubic domain@comma{}
@code{[x-z][0@comma{}1]} for the
domain faces@comma{} @code{[x-z][0@comma{}1][x-z][0@comma{}1]} for the
edges@comma{} and
@code{[x-z][0@comma{}1][x-z][0@comma{}1][x-z][0@comma{}1]} for the
vertices.  Append @samp{body} to the name to get only the body nodes of
the sets. Combine them with commas.
,
any, faces}

@opt{-faset, char_string,
Specify the domain surfaces to provide. Use @samp{faces} for all faces.
Combine them with commas.
,
faces@comma{} [x-z][0@comma{}1],none}

@section Output Files

@subsection Mesh

The mesh can be written in the following formats:

@itemize
@item Gmsh format: @file{.msh}

@item Abaqus format: file @file{.inp}

@item Zset/Z@'ebulon format: @file{.geof}
@end itemize

When the input data is of type @code{(n, id)}, the following file is
also generated (as in @mT{}):

@itemize
@item orientation input file: @file{.oin}

It contains data for generating the grain orientations, and
is an input file for @mO{} (@pxref{Module -O}).
@end itemize


@section Examples

Below are some examples of use of neper -MM.  Illustrations can be found
at @url{http://neper.sourceforge.net/neper_mm.html}.

@enumerate
@c Example_beg
@item    Mesh tessellation n100-id1.tess.
@com{neper -MM n100-id1.tess}
@item    Mesh tessellation n100-id1.tess with 40 elements per unit length.
@com{neper -MM n100-id1.tess -msize 40}
@item    Provide a mesh of a periodic tessellation made of 100 grains, with identifier 1.
@com{neper -MM -n 100 -id 1 -msize 40 -ttype periodic}
@c Example_end
@end enumerate

